def multiProcess(input):
def convertGCFGenbanksIntoFastas(gcf_specs_file, outdir, logObject):
def calculateMashPairwiseDifferences(fasta_listing_file, outdir, name, sketch_size, cores, logObject):
def readInBGCGenbanksPerGCF(gcf_specs_file, logObject, comprehensive_parsing=True):
def createItolBGCSeeTrack(bgc_genes, gene_to_cog, cog_to_color, comp_gene_info, dataset_label, outdir, logObject):
def determineCogOrderIndex(bgc_genes, gene_to_cog, comp_gene_info):
def constructBGCPhylogeny(codon_alignments_dir, output_prefix, logObject):
def constructCodonAlignments(bgc_sample, cog_genes, comp_gene_info, outdir, cores, logObject, only_scc=False):
def create_codon_msas(inputs):
def mapComprehensiveBGCsList(all_bgcs_file, logObject):
def runHMMScanAndAssignBGCsToGCF(comprehensive_bgcs, concat_hmm_profiles, scc_homologs, orthofinder_matrix_file, outdir,
def constructHMMProfiles(bgc_sample, cog_genes, comp_gene_info, outdir, cores, logObject):
def create_hmm_profiles(inputs):
def modifyPhylogenyForSamplesWithMultipleBGCs(phylogeny, sample_bgcs, output_phylogeny, logObject):
def readInBGCGenbanksComprehensive(bgc_specs_file, logObject):
def getSpeciesRelationshipsFromPhylogeny(species_phylogeny, samples_in_gcf):
def readInPopulationsSpecification(pop_specs_file, logObject):
def writeLociFileForPegas(codon_msa, outfile, logObject, sample_population=None):
def parseCodonAlignmentStats(cog, codon_alignment_fasta, comp_gene_info, cog_genes, cog_order_index,
def parseGenbanks(gbk, bgc_name, comprehensive_parsing=True):
def extractGeneWithFlanksAndCluster(bgc_genes, comp_gene_info, gene_to_cog, outdir, logObject):
def createSummaryMatricesForMetaNovelty(paired_end_sequencing_file, results_outdir, main_outdir, logObject):
def generateNoveltyReport(results_outdir, codon_alignment_file, cog_prop_multicopy, comp_gene_info, outdir, logObject):
def runSNVMining(cog_genes, comp_gene_info, bowtie2_ref_fasta, paired_end_sequencing_file, instance_to_haplotype,
def snv_miner(input_args):
def runBowtie2Alignments(bowtie2_reference, paired_end_sequencing_file, bowtie2_outdir, cores, logObject):
def run_cmd(cmd, logObject, stdout=subprocess.DEVNULL):
def bowtie2_alignment(input_args):
def read_pair_generator(bam, region_string=None, start=None, stop=None):
def calculateBGCPairwiseRelations(bgc_genes, gene_to_cog, prop_multi_copy, outdir, logObject):
def runMCLAndReportGCFs(mip, jcp, outdir, sf_handle, pairwise_relations, pair_relations_txt_file,
def parseOrthoFinderMatrix(orthofinder_matrix_file, all_gene_lts, calc_prop_multicopy=False):
def readInAssemblyListing(assembly_listing_file, logObject):
def runProkka(sample_assemblies, prokka_outdir, prokka_proteomes, prokka_genbanks, prokka_load_code, dry_run_flag,
def extractBGCProteomes(s, bgc_genbank, bgc_proteomes_outdir, logObject):
def runAntiSMASHFromAssemblies(sample_assemblies, antismash_outdir, antismash_load_code, dry_run_flag, cores, logObject,
def runAntiSMASH(prokka_genbanks_dir, antismash_outdir, antismash_load_code, dry_run_flag, cores, logObject):
def runOrthoFinder(prokka_proteomes_dir, orthofinder_outdir, orthofinder_load_code, dry_run_flag, cores, logObject):
def is_fasta(fasta):
def is_genbank(fasta):
def createLoggerObject(log_file):
def closeLoggerObject(logObject):
def logParameters(parameter_names, parameter_values):
def logParametersToFile(parameter_file, parameter_names, parameter_values):
def logParametersToObject(logObject, parameter_names, parameter_values):
def assignColorsToCOGs(gene_to_cog, bgc_genes):
